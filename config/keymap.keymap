#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&none  &none      &none         &none             &none  &none                                                  &none        &none  &none      &none     &none                      &none
&none  &kp Q      &kp W         &kp E             &kp R  &kp T                                                  &kp Y        &kp U  &kp I      &kp O     &kp P                      &none
&none  &kp A      &kp S         &kp D             &kp F  &kp G        &none                   &none             &kp H        &kp J  &kp K      &kp L     &kp ENTER                  &none
&none  &kp Z      &kp X         &kp C             &kp V  &kp B        &none                   &none             &kp N        &kp M  &kp COMMA  &kp DOT   &mt RIGHT_SHIFT BACKSPACE  &none
&none  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_CONTROL  &mo 1  &lt 2 LANG2  &mt LEFT_COMMAND SPACE  &mt RSHIFT SPACE  &lt 3 LANG1  &none  &none      &kp RGUI  &kp SLASH                  &none
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans                  &trans  &trans     &trans     &trans           &trans            &trans
&trans  &trans  &trans  &trans     &trans     &trans                  &trans  &trans     &trans     &trans           &trans            &trans
&trans  &trans  &trans  &mkp RCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &msc MOVE_Y(10)  &msc MOVE_Y(-10)  &trans
&trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans           &trans            &trans
&trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans           &trans            &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans    &trans             &trans    &trans      &trans                       &trans         &trans            &trans            &trans             &trans         &trans
&trans  &kp EXCL  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp AMPERSAND  &kp SINGLE_QUOTE  &kp LPAR          &kp RPAR           &kp QUESTION   &trans
&trans  &kp N1    &kp N2             &kp N3    &kp N4      &kp N5       &trans  &trans  &kp EQUAL      &kp MINUS         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp COLON      &trans
&trans  &kp N6    &kp N7             &kp N8    &kp N9      &kp N0       &trans  &trans  &kp UNDER      &kp PLUS          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON  &trans
&trans  &trans    &trans             &trans    &trans      &trans       &trans  &trans  &kp ASTERISK   &none             &trans            &trans             &kp BACKSLASH  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans   &trans   &trans        &trans        &trans                      &trans            &trans          &trans          &trans         &trans      &trans
&trans  &kp ESC  &kp F2   &kp F3        &kp F4        &kp F5                      &kp HOME          &kp PG_UP       &kp UP_ARROW    &kp PAGE_DOWN  &kp ESCAPE  &trans
&trans  &kp TAB  &kp F7   &kp F8        &kp F9        &kp F10     &trans  &trans  &kp AT            &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &kp TAB     &trans
&trans  &kp F11  &kp F12  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &trans  &trans  &kp SINGLE_QUOTE  &kp DQT         &kp GRAVE       &kp TILDE      &kp PIPE    &trans
&trans  &trans   &trans   &trans        &kp DELETE    &kp TAB     &trans  &trans  &trans            &trans          &trans          &trans         &trans      &trans
            >;
        };
    };
};
